<?php
/**
 *
 *  Copyright (C) 2017 paj@gaiterjones.com
 *
 *
 */

namespace PAJ\Application\AmazonDev\Alexa\Intent;
use PAJ\Application\AmazonDev\Alexa\GetIntent;

/**
 * ALEXA INTENT CLASS
 *
 * @extends GetIntent
 */
class MalwareFacts extends GetIntent {


	public function __construct
	(
		$_environment
	)
	{

		$this->loadEnvironment($_environment);

		// intent request
		$this->intent();


	}


	protected function intent()
	{
		// init vars
		//
		$this->set('success',false);
		$this->set('errormessage','intent -> Default error message.');

		// alexa request data
		//
		$_alexaRequest=$this->get('alexarequest');

		$_locale=$_alexaRequest['request']['locale'];

		// parse request and perform actions
		//
		if (isset($_alexaRequest['request']['intent']['name'])) {

			$this->set('intentname',$_alexaRequest['request']['intent']['name']);
			$this->set('intenttitle','Malware Facts');

			$_now = new \DateTime(null, new \DateTimeZone('Europe/London'));

			$_response=$this->intentAction($_alexaRequest);

			$_endSession=true;
			if (isset($_response['intent']['endsession'])) {$_endSession=$_response['intent']['endsession'];}

			$_sessionAttributes=false;
			if (isset($_response['intent']['sessionattributes'])) {$_sessionAttributes=$_response['intent']['sessionattributes'];}

			$_outputSSML=false;
			if (isset($_response['intent']['outputssml'])) {$_outputSSML=$_response['intent']['outputssml'];}

			$this->set('success',true);

			$this->set('output',array(
					'intent' => array(
						$_alexaRequest['request']['intent']['name'] => array(
							'response' => $_response['intent']['response'],
							'card' => $_response['intent']['card'],
							'status' => $_response['intent']['status'],
							'target' => $_response['intent']['target'],
							'endsession' => $_endSession,
							'sessionattributes' => $_sessionAttributes,
							'outputssml' => $_outputSSML,
							'locale' => $_locale,
							'timestamp' => $_now->format('Y-m-d\TH:i:sP')
						)
					)
			));

		} else {

			$this->set('errormessage','Invalid alexa request data.');
		}


	}

	protected function intentAction($_alexaRequest)
	{
		// intent action for FACTSDEV
		//

		// vars
		//
		$_slots=false;
		$_sessionData=false;
		$_target=false;

		// init commmand vars
		//
		$_commandFound=false;
		$_commandTargetFound=false;
		$_now = new \DateTime(null, new \DateTimeZone($this->__config->get('timezone')));
		$_debug=false;

		// init object names
		$_objectNames=array();

		// default response
		//
		$_response='Sorry I could not complete your request.';

		// intent data
		//
		if (isset($_alexaRequest['request']['intent']['slots']))
		{
			$_slots=$_alexaRequest['request']['intent']['slots'];
		}
		if (isset($_alexaRequest['session']['attributes']))
		{
			$_sessionData=$_alexaRequest['session']['attributes'];
		}

		if (is_array($_slots))
		{

			foreach ($_slots as $_slot)
			{

				//
				// - PARSE PROMPT SLOTS
				//
				if ($_slot['name']=='prompt' && isset($_slot['value']))
				{

					return $this->promptSlotResponse($_slot,$_sessionData);

				} // prompt slots


				//
				// - PARSE COMMAND SLOTS
				//
				if ($_slot['name']=='command' && isset($_slot['value']))
				{
					return $this->commandSlotResponse($_slot,$_sessionData);

				} // command slots

				//
				// - PARSE SEARCH SLOTS
				//
				if ($_slot['name']=='search' && isset($_slot['value']))
				{
					return $this->searchSlotResponse($_slot,$_sessionData);

				} // command slots

			} // loop
		}


		// failed
		return array(
			'intent' => array(
				'response' => $_response,
				'card' => false,
				'target' => false,
				'status' => false,
				'endsession' => true
			)
		);
	}

	protected function commandSlotResponse($_slot,$_sessionData)
	{
		// default response
		//
		$_response='Sorry I did not understand what you said, please try again.';

		$_slotValue=$_slot['value'];

		$_spokenWords = explode(' ', strtolower($_slotValue));

		$this->set('spokenwords',$_spokenWords);

		// FACT / TRIVIA SLOT
		//
		if (
			in_array('fact', $_spokenWords) ||
			in_array('facts', $_spokenWords) ||
			in_array('fax', $_spokenWords) ||
			in_array('info', $_spokenWords) ||
			in_array('trivia', $_spokenWords)
			)
		{
			// get new fact
			//
			return MalwareFactsData::getNewFact($_sessionData,false,$this->get('intentname'));

		} // parse words

		// failed
		return array(
			'intent' => array(
				'response' => $_response,
				'card' => false,
				'target' => false,
				'status' => false,
				'endsession' => true
			)
		);

	}

	protected function searchSlotResponse($_slot,$_sessionData)
	{
		// default response
		//
		$_slotValue=$_slot['value'];

		$_spokenWords = explode(' ', strtolower($_slotValue));

		$this->set('spokenwords',$_spokenWords);

		$_obj=new Helper();
			$_subjects=$_obj->getSubjects('MalwareFacts');
				unset($_obj);

		array_push($_subjects,'trojans','viruses');

		// FACT SUBJECT SEARCH
		//
		foreach ($_subjects as $_subject)
		{
			if (in_array($_subject, $_spokenWords))
			{
				// get new fact
				//
				return MalwareFactsData::getNewFact($_sessionData,$_slotValue,$this->get('intentname'));

			}
		}

		// failed
		$_randKeys = array_rand($_subjects, 2);
		return array(
			'intent' => array(
				'response' => 'Sorry I do not have any information on that subject. Try asking me about '. $_subjects[$_randKeys[0]]. ' or '. $_subjects[$_randKeys[1]]. '.',
				'card' => false,
				'target' => false,
				'status' => false,
				'endsession' => true
			)
		);

	}


	protected function promptSlotResponse($_slot,$_sessionData)
	{
		$_slotValue=$_slot['value'];

		$_spokenWords = explode(' ', strtolower($_slotValue));

		$this->set('spokenwords',$_spokenWords);

		// PARSE SPOKEN WORDS IF REQUIRED
		//
		// yes / no response to prompt :
		//
		if ($_sessionData['object']===$this->get('intentname'))
		{

			// check session prompt
			//
			if (!isset($_sessionData['prompt']))
			{
					// invalid prompt
					//
					return array(
						'intent' => array(
						'response' => 'Sorry, I did not expect that answer!',
							'card' => false,
							'target' => false,
							'status' => false,
							'endsession' => true
						)
					);
			}

			// prompt response YES
			//
			if (
					in_array('yes', $_spokenWords) ||
					in_array('ok', $_spokenWords) ||
					in_array('sure', $_spokenWords) ||
					in_array('yeah', $_spokenWords)
				)
			{
				// get another fact
				//
				return MalwareFactsData::getNewFact($_sessionData,false,$this->get('intentname'));

			}

		} // parse words


		// prompt response NO
		//
		if (in_array('no', $_spokenWords))
		{
			$_target='no';
			$_targetFound=true;

			if ($_targetFound)
			{

				// command success
				//
				return array(
					'intent' => array(
						'response' => 'Ok, goodbye!',
						'card' => false,
						'target' => $_target,
						'status' => false,
						'endsession' => true
					)
				);


			} // target not found

		} // parse words

		// prompt response HELP
		//
		if (in_array('help', $_spokenWords))
		{
			$_target='help';
			$_response=\PAJ\Application\AmazonDev\Alexa\Help\helpdfd8c2c3bc06::help();

			return (
				array(
					'intent' => $_response
				)
			);

		} // parse words


		// prompt response not understood
		//
		return array(
			'intent' => array(
				'response' => 'Sorry I did not understand what you said. Please repeat it.',
				'card' => false,
				'target' => $_target,
				'status' => false,
				'sessionattributes' => array('object' => $this->get('intentname'), 'target' => false,'prompt' => true, 'data' => $_sessionData['data']),
				'endsession' => false
			)
		);
	}


}
?>
